
import db.DBHelper;
import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.Policy;
import util.Lang;
import util.LanguageConfig;
import util.PolicySerializer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Fikal Alif
 */
public class Dashboard extends javax.swing.JFrame {

    private DefaultTableModel model;
    private JProgressBar progressBar;

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents(); // dipanggil oleh NetBeans otomatis
        setTitle("üì∞ " + Lang.get("title") + " - " + Lang.get("institution"));

        String[] columns = {"ID", Lang.get("title"), Lang.get("institution"), Lang.get("category"), Lang.get("date"), Lang.get("status"), Lang.get("description")};
        model = new DefaultTableModel(columns, 0);
        table.setModel(model);  // 'table' di sini adalah JTable hasil drag dari GUI
        progressBar = new JProgressBar();
        progressBar.setIndeterminate(true);
        progressBar.setVisible(false);
        add(progressBar, BorderLayout.NORTH);

    }

    private void loadPolicies() {
        model.setRowCount(0);
        try (Connection conn = DBHelper.connect()) {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM policies");
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("title"),
                    rs.getString("institution"),
                    rs.getString("category"),
                    rs.getDate("date"),
                    rs.getString("status"),
                    rs.getString("description")
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();
        btnLang = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(592, 75));

        btnAdd.setText("Tambah");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Ubah");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Hapus");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Simpan");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("üìÇ Buka");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnReload.setText("üîÑ Muat Ulang");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        btnLang.setText("üåê Ganti Bahasa");
        btnLang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLangActionPerformed(evt);
            }
        });

        btnLogout.setText("Keluar");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(btnAdd)
                .addGap(6, 6, 6)
                .addComponent(btnEdit)
                .addGap(6, 6, 6)
                .addComponent(btnDelete)
                .addGap(6, 6, 6)
                .addComponent(btnSave)
                .addGap(6, 6, 6)
                .addComponent(btnLoad)
                .addGap(6, 6, 6)
                .addComponent(btnReload)
                .addGap(6, 6, 6)
                .addComponent(btnLang)
                .addGap(6, 6, 6)
                .addComponent(btnLogout))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnSave)
                    .addComponent(btnLoad)
                    .addComponent(btnReload)
                    .addComponent(btnLang)
                    .addComponent(btnLogout)))
        );

        table.setBackground(new java.awt.Color(153, 255, 153));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Aplikasi Pemantauan Kebijakan Publik", "Instansi", "Kategori", "Tanggal", "Status", "Deskripsi"
            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        tambahData();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editData();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        hapusData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        simpanDataAsync();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        muatData();
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        loadAsync();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnLangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLangActionPerformed
        gantiBahasa();
    }//GEN-LAST:event_btnLangActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        int response = JOptionPane.showConfirmDialog(this,
                "Apakah Anda yakin ingin logout?",
                "Konfirmasi Logout",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {

            // Tampilkan form login
            new Login().setVisible(true);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnLang;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
private void tambahData() {
        Policy p = showInputDialog(null);
        if (p != null) {
            try (Connection conn = DBHelper.connect()) {
                PreparedStatement stmt = conn.prepareStatement("INSERT INTO policies (title, institution, category, date, status, description) VALUES (?, ?, ?, ?, ?, ?)");
                stmt.setString(1, p.getTitle());
                stmt.setString(2, p.getInstitution());
                stmt.setString(3, p.getCategory());
                stmt.setString(4, p.getDate());
                stmt.setString(5, p.getStatus());
                stmt.setString(6, p.getDescription());
                stmt.executeUpdate();
                loadPolicies();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void editData() {
        int row = table.getSelectedRow();
        if (row == -1) {
            return;
        }

        Policy p = new Policy(
                (int) model.getValueAt(row, 0),
                (String) model.getValueAt(row, 1),
                (String) model.getValueAt(row, 2),
                (String) model.getValueAt(row, 3),
                model.getValueAt(row, 4).toString(),
                (String) model.getValueAt(row, 5),
                (String) model.getValueAt(row, 6)
        );

        Policy edited = showInputDialog(p);
        if (edited != null) {
            try (Connection conn = DBHelper.connect()) {
                PreparedStatement stmt = conn.prepareStatement("UPDATE policies SET title=?, institution=?, category=?, date=?, status=?, description=? WHERE id=?");
                stmt.setString(1, edited.getTitle());
                stmt.setString(2, edited.getInstitution());
                stmt.setString(3, edited.getCategory());
                stmt.setString(4, edited.getDate());
                stmt.setString(5, edited.getStatus());
                stmt.setString(6, edited.getDescription());
                stmt.setInt(7, edited.getId());
                stmt.executeUpdate();
                loadPolicies();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void hapusData() {
        int row = table.getSelectedRow();
        if (row == -1) {
            return;
        }

        int id = (int) model.getValueAt(row, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "Yakin hapus?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DBHelper.connect()) {
                PreparedStatement stmt = conn.prepareStatement("DELETE FROM policies WHERE id=?");
                stmt.setInt(1, id);
                stmt.executeUpdate();
                loadPolicies();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void simpanDataAsync() {
        new Thread(() -> {
            try {
                File file = new File("data_kebijakan.dat");
                List<Policy> data = getTableData();

                // Simulasi proses berat
                Thread.sleep(1000);

                PolicySerializer.save(data, file);

                // Update UI di EDT
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, "‚úÖ Data berhasil disimpan ke file terenkripsi!");
                });

            } catch (Exception e) {
                e.printStackTrace();
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, "‚ùå Gagal menyimpan data!", "Error", JOptionPane.ERROR_MESSAGE);
                });
            }
        }).start();
    }

    private void muatData() {
        try {
            File file = new File("data_kebijakan.dat");
            List<Policy> data = PolicySerializer.load(file);
            model.setRowCount(0);
            for (Policy p : data) {
                model.addRow(new Object[]{
                    p.getId(), p.getTitle(), p.getInstitution(),
                    p.getCategory(), p.getDate(), p.getStatus(), p.getDescription()
                });
            }
            JOptionPane.showMessageDialog(this, "Berhasil dimuat dari file terenkripsi!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private List<Policy> getTableData() {
        java.util.List<Policy> list = new java.util.ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            list.add(new Policy(
                    (int) model.getValueAt(i, 0),
                    (String) model.getValueAt(i, 1),
                    (String) model.getValueAt(i, 2),
                    (String) model.getValueAt(i, 3),
                    model.getValueAt(i, 4).toString(),
                    (String) model.getValueAt(i, 5),
                    (String) model.getValueAt(i, 6)
            ));
        }
        return list;
    }

    private void loadAsync() {
        progressBar.setVisible(true); // Munculkan progress bar di awal

        new Thread(() -> {
            List<Object[]> rows = new ArrayList<>();

            try {
                // Tambahkan delay untuk memastikan animasi terlihat
                Thread.sleep(1000); // Simulasi loading berat

                try (Connection conn = DBHelper.connect()) {
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT * FROM policies");

                    while (rs.next()) {
                        rows.add(new Object[]{
                            rs.getInt("id"),
                            rs.getString("title"),
                            rs.getString("institution"),
                            rs.getString("category"),
                            rs.getDate("date"),
                            rs.getString("status"),
                            rs.getString("description")
                        });
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            SwingUtilities.invokeLater(() -> {
                model.setRowCount(0);
                for (Object[] row : rows) {
                    model.addRow(row);
                }

                progressBar.setVisible(false); // Sembunyikan progress bar setelah selesai
            });
        }).start();
    }

    public void updateLanguage() {
        setTitle("üì∞ " + Lang.get("title") + " - " + Lang.get("institution"));
        String[] columns = {"ID", Lang.get("title"), Lang.get("institution"), Lang.get("category"), Lang.get("date"), Lang.get("status"), Lang.get("description")};
        for (int i = 0; i < columns.length; i++) {
            table.getColumnModel().getColumn(i).setHeaderValue(columns[i]);
        }
        table.getTableHeader().repaint();
        btnAdd.setText(Lang.get("add"));
        btnEdit.setText(Lang.get("edit"));
        btnDelete.setText(Lang.get("delete"));
        btnSave.setText(Lang.get("save"));
        btnLoad.setText("üìÇ " + Lang.get("open"));
        btnReload.setText("üîÑ " + Lang.get("reload"));
        btnLang.setText("üåê " + Lang.get("change_language"));
        btnLogout.setText("üåê " + Lang.get("LogOut"));
    }

    private void gantiBahasa() {
        String[] pilihan = {"id", "en"};
        String selected = (String) JOptionPane.showInputDialog(
                this,
                Lang.get("change_language_prompt"),
                Lang.get("change_language"),
                JOptionPane.QUESTION_MESSAGE,
                null,
                pilihan,
                LanguageConfig.loadLanguage()
        );

        if (selected != null) {
            LanguageConfig.saveLanguage(selected);
            Lang.setLocale(selected);
            updateLanguage();
            JOptionPane.showMessageDialog(this, Lang.get("language_changed"), Lang.get("info"), JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private Policy showInputDialog(Policy p) {
        JTextField tfTitle = new JTextField(p != null ? p.getTitle() : "");
        JTextField tfInst = new JTextField(p != null ? p.getInstitution() : "");
        JTextField tfCat = new JTextField(p != null ? p.getCategory() : "");
        JTextField tfDate = new JTextField(p != null ? p.getDate() : "YYYY-MM-DD");
        JTextField tfStat = new JTextField(p != null ? p.getStatus() : "");
        JTextArea taDesc = new JTextArea(p != null ? p.getDescription() : "", 3, 20);
        taDesc.setLineWrap(true);
        taDesc.setWrapStyleWord(true);

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10); // Margin antar komponen
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        int y = 0;

        gbc.gridx = 0;
        gbc.gridy = y;
        panel.add(new JLabel(Lang.get("title")), gbc);
        gbc.gridx = 1;
        panel.add(tfTitle, gbc);

        gbc.gridx = 0;
        gbc.gridy = ++y;
        panel.add(new JLabel(Lang.get("institution")), gbc);
        gbc.gridx = 1;
        panel.add(tfInst, gbc);

        gbc.gridx = 0;
        gbc.gridy = ++y;
        panel.add(new JLabel("Kategori"), gbc);
        gbc.gridx = 1;
        panel.add(tfCat, gbc);

        gbc.gridx = 0;
        gbc.gridy = ++y;
        panel.add(new JLabel("Tanggal (YYYY-MM-DD)"), gbc);
        gbc.gridx = 1;
        panel.add(tfDate, gbc);

        gbc.gridx = 0;
        gbc.gridy = ++y;
        panel.add(new JLabel("Status"), gbc);
        gbc.gridx = 1;
        panel.add(tfStat, gbc);

        gbc.gridx = 0;
        gbc.gridy = ++y;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        panel.add(new JLabel("Deskripsi"), gbc);
        gbc.gridx = 1;
        panel.add(new JScrollPane(taDesc), gbc);

// Show dialog
        int res = JOptionPane.showConfirmDialog(this, panel, Lang.get("form_title"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (res == JOptionPane.OK_OPTION) {
            return new Policy(
                    p != null ? p.getId() : 0,
                    tfTitle.getText(), tfInst.getText(), tfCat.getText(),
                    tfDate.getText(), tfStat.getText(), taDesc.getText()
            );
        }
        return null;

    }
}
